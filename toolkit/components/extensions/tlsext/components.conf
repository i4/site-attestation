Classes = [
    {
        'cid': '{74738afc-c654-4947-b6aa-22d0b3c854f3}',
        'interfaces': ['nsITlsExtensionService'],

        # A contract ID is a human-readable identifier for an _implementation_ of
        # an XPCOM interface.
        #
        # "@mozilla.org/process/environment;1"
        #  ^^^^^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^ ^
        #  |            |       |           |
        #  |            |       |           The version number, usually just 1.
        #  |            |       Component name
        #  |            Module
        #  Domain
        #
        # This design goes back to a time when XPCOM was intended to be a generalized
        # solution for the Gecko Runtime Environment (GRE). At this point most (if
        # not all) of mozilla-central has an @mozilla domain.
        'contract_ids': ['@mozilla.org/extensions/tls-extension-service;1'],

        # This is the name of the C++ type that implements the interface.
        'type': 'mozilla::extensions::TlsExtensionService',

        'singleton': True,
        'constructor': 'mozilla::extensions::TlsExtensionService::GetSingleton',

        # The header file to pull in for the implementation of the interface.
        'headers': ['mozilla/extensions/TlsExtensionService.h'],

        # In order to hook up this interface to the `Services` object, we can
        # provide the "js_name" parameter. This is an ergonomic way to access
        # the component.
        'js_name': 'tlsExtensions',

        # name for mozilla::components
        'name': 'TlsExtensionService',

        # 'categories': {'app-startup': 'TlsExtensionService'},
    },
    {
        'cid': '{d4834e5a-41db-4f97-a45d-d4dc53057553}',
        # 'interfaces': ['nsITlsExtensionObserver'],
        'contract_ids': ['@mozilla.org/extensions/tls-extension-observer;1'],
        'esModule': "resource://gre/modules/TlsExtensionObserver.sys.mjs",
        'constructor': 'TlsExtensionObserver',
        'js_name': 'tlsExtensionsObserver',
    },
]